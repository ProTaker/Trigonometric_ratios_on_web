#pip install pandas #初回のみターミナル(Mac)orコマンドプロンプト(Win)
import random
import time
import pandas as pd
from decimal import Decimal, ROUND_HALF_UP

def main():
    angles_degrees = [-360, -330, -315, -300, -270, -240, -225, -210, -180, -150, -135, -120, -90, -60, -45, -30, 0, 30, 45, 60, 90, 120, 135, 150, 180, 210, 225, 240, 270, 300, 315, 330, 360, 390, 420, 450]
    angles_radians = ["-2π", "-11π/6", "-7π/4", "-5π/3", "-3π/2", "-4π/3", "-5π/4", "-7π/6", "-π", "-5π/6", "-3π/4", "-2π/3", "-π/2", "-π/3", "-π/4", "-π/6", "0", "π/6", "π/4", "π/3", "π/2", "2π/3", "3π/4", "5π/6", "π", "7π/6", "5π/4", "4π/3", "3π/2", "5π/3", "7π/4", "11π/6", "2π", "13π/6", "7π/3", "5π/2"]

    trig_functions = ['sin', 'cos', 'tan']

    trig_values_degrees = {
        'sin': {-360: '0', -330: '1/2', -315: '√2/2', -300: '√3/2', -270: '1', -240: '√3/2', -225: '√2/2', -210: '1/2', -180: '0', -150: '-1/2', -135: '-√2/2', -120: '-√3/2', -90: '-1', -60: '-√3/2', -45: '-√2/2', -30: '-1/2', 0: '0', 30: '1/2', 45: '√2/2', 60: '√3/2', 90: '1', 120: '√3/2', 135: '√2/2', 150: '1/2', 180: '0', 210: '-1/2', 225: '-√2/2', 240: '-√3/2', 270: '-1', 300: '-√3/2', 315: '-√2/2', 330: '-1/2', 360: '0', 390: '1/2', 420: '√3/2', 450: '1'},
        'cos': {-360: '1', -330: '√3/2', -315: '√2/2', -300: '1/2', -270: '0', -240: '-1/2', -225: '-√2/2', -210: '-√3/2', -180: '-1', -150: '-√3/2', -135: '-√2/2', -120: '-1/2', -90: '0', -60: '1/2', -45: '√2/2', -30: '√3/2', 0: '1', 30: '√3/2', 45: '√2/2', 60: '1/2', 90: '0', 120: '-1/2', 135: '-√2/2', 150: '-√3/2', 180: '-1', 210: '-√3/2', 225: '-√2/2', 240: '-1/2', 270: '0', 300: '1/2', 315: '√2/2', 330: '√3/2', 360: '1', 390: '√3/2', 420: '1/2', 450: '0'},
        'tan': {-360: '0', -330: '-√3/3', -315: '-1', -300: '-√3', -270: '定義なし', -240: '√3', -225: '1', -210: '√3/3', -180: '0', -150: '-√3/3', -135: '-1', -120: '-√3', -90: '定義なし', -60: '√3', -45: '1', -30: '√3/3', 0: '0', 30: '√3/3', 45: '1', 60: '√3', 90: '定義なし', 120: '-√3', 135: '-1', 150: '-√3/3', 180: '0', 210: '√3/3', 225: '1', 240: '√3', 270: '定義なし', 300: '-√3', 315: '-1', 330: '-√3/3', 360: '0', 390: '√3/3', 420: '√3', 450: '定義なし'}
    }

    trig_values_radians = {
        'sin': {"-2π": '0', "-11π/6": '1/2', "-7π/4": '√2/2', "-5π/3": '√3/2', "-3π/2": '1', "-4π/3": '√3/2', "-5π/4": '√2/2', "-7π/6": '1/2', "-π": '0', "-5π/6": '-1/2', "-3π/4": '-√2/2', "-2π/3": '-√3/2', "-π/2": '-1', "-π/3": '-√3/2', "-π/4": '-√2/2', "-π/6": '-1/2', "0": '0', "π/6": '1/2', "π/4": '√2/2', "π/3": '√3/2', "π/2": '1', "2π/3": '√3/2', "3π/4": '√2/2', "5π/6": '1/2', "π": '0', "7π/6": '-1/2', "5π/4": '-√2/2', "4π/3": '-√3/2', "3π/2": '-1', "5π/3": '-√3/2', "7π/4": '-√2/2', "11π/6": '-1/2', "2π": '0', "13π/6": '1/2', "7π/3": '√3/2', "5π/2": '1'},
        'cos': {"-2π": '1', "-11π/6": '√3/2', "-7π/4": '√2/2', "-5π/3": '1/2', "-3π/2": '0', "-4π/3": '-1/2', "-5π/4": '-√2/2', "-7π/6": '-√3/2', "-π": '-1', "-5π/6": '-√3/2', "-3π/4": '-√2/2', "-2π/3": '-1/2', "-π/2": '0', "-π/3": '1/2', "-π/4": '√2/2', "-π/6": '√3/2', "0": '1', "π/6": '√3/2', "π/4": '√2/2', "π/3": '1/2', "π/2": '0', "2π/3": '-1/2', "3π/4": '-√2/2', "5π/6": '-√3/2', "π": '-1', "7π/6": '-√3/2', "5π/4": '-√2/2', "4π/3": '-1/2', "3π/2": '0', "5π/3": '1/2', "7π/4": '√2/2', "11π/6": '√3/2', "2π": '1', "13π/6": '√3/2', "7π/3": '1/2', "5π/2": '0'},
        'tan': {"-2π": '0', "-11π/6": '-√3/3', "-7π/4": '-1', "-5π/3": '-√3', "-3π/2": '定義なし', "-4π/3": '√3', "-5π/4": '1', "-7π/6": '√3/3', "-π": '0', "-5π/6": '-√3/3', "-3π/4": '-1', "-2π/3": '-√3', "-π/2": '定義なし', "-π/3": '√3', "-π/4": '1', "-π/6": '√3/3', "0": '0', "π/6": '√3/3', "π/4": '1', "π/3": '√3', "π/2": '定義なし', "2π/3": '-√3', "3π/4": '-1', "5π/6": '-√3/3', "π": '0', "7π/6": '√3/3', "5π/4": '1', "4π/3": '√3', "3π/2": '定義なし', "5π/3": '-√3', "7π/4": '-1', "11π/6": '-√3/3', "2π": '0', "13π/6": '√3/3', "7π/3": '√3', "5π/2": '定義なし'}
    }

    results = []

    while True:
        mode = input("モードを選択してください（1: 度数法[°], 2: 弧度法[rad]）: ")
        if mode == '1':
            angles = angles_degrees
            values = trig_values_degrees
            unit = "°"
        else:
            angles = angles_radians
            values = trig_values_radians
            unit = ""

        score = 0
        start_time = time.time()
        correct_answers = []

        for question_number in range(1, 11):
            angle = random.choice(angles)
            func = random.choice(trig_functions)
            correct_answer = values[func][angle]

            options = [correct_answer]
            
            while len(options) < 4:
                fake_answer = random.choice(list(values[func].values()))
                if fake_answer not in options:
                    options.append(fake_answer)
            
            random.shuffle(options)
            
            print(f"\n問題{question_number} : {func}({angle}{unit})=")
            for i, option in enumerate(options, 1):
                print(f"         {i}: {option}")
            
            while True:
                try:
                    answer = int(input("正しい答えを選んでください（1-4）: "))
                    if 1 <= answer <= 4:
                        break
                    else:
                        print("1から4の番号を入力してください。")
                except ValueError:
                    print("数字を入力してください。")

            if options[answer - 1] == correct_answer:
                score += 1
                correct_answers.append(f"問題{question_number} : 正解です！")
            else:
                correct_answers.append(
                    f"問題{question_number} : 間違いです。正解は {func}({angle}{unit})={correct_answer} でした。"
                )

        end_time = time.time()
        time_taken = end_time - start_time
        time_taken = Decimal(str(time_taken)).quantize(Decimal('0.01'), ROUND_HALF_UP)
        score *= 10

        print("\n結果:")
        for result in correct_answers:
            print(result)
            
        print(f"\nあなたの得点は100点中 {score} 点です。")
        print(f"経過時間: {time_taken:.2f} 秒。")

        results.append((score, time_taken))
        
        # 表示
        df = pd.DataFrame(results, columns=[" 得点", "時間"], index=pd.RangeIndex(start=1, stop=len(results) + 1))
        df = df.add_suffix('回目', axis='index')
        print("\n試験結果の統計:")
        print(df)

        retry = input("\nもう一度テストを行いますか？（1: はい, 2: いいえ）: ")
        if retry != '1':
            break

if __name__ == "__main__":
    main()
